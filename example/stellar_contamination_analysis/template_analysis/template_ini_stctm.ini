[paths]
# path to folder containing Lopez & Fortney + Zeng + Aguichine models
path_folder_models = ../smint_models/

# saving path (OR path to chains if run_fit==False)
outputdir = ../smint_results/
# identifier for this fit (used for saving)
fname = test_fh2o

[physical params]
# Mass and Radius in Earth units
Mp_earth = 6.2
err_Mp_earth = 0.2

Rp_earth = 2.19
err_Rp_earth = 0.09

## The physical parameter below is only needed for irr. ocean worlds models
# irradiation temperature
Tirr = 686.
err_Tirr = 10.

## The physical parameters below are not needed for a fit of the H2O fraction
# incident flux at the planet in units of the solar constant
Sinc_earth = 32.3
err_Sinc_earth = 0.9

# system params
# for a flat prior on the age (used if flat_age==True)
# lower bound (inf) and upper bound (sup)
age_Gyr_inf = 1.
age_Gyr_sup = 10.

# alternatively, for a gaussian prior (used if flat_age==False)
# median and std of gaussian prior
age_Gyr = 5.
err_age_Gyr = 3.

[MCMC params]
# if True, use flat prior on star's age
flat_age = True
# if True, prior on fenv uniform on log10
log_fenv_prior = False

# number of MCMC steps [for testing, for analysis use much more e.g. 10000]
nsteps = 1000
# number of fitted params (4 for fenv, 2 for fh2o)
ndim = 2
# number of MCMC walkers
nwalkers = 100

# if True, runs the MCMC; otherwise, postprocess an existing fit
run_fit = True
# fraction of the chains to be discarded as burn-in [0-1]
frac_burnin = 0.6


[plotting]

# colors for corner and histograms

## The plotting parameters below are not needed for a fit of the H2He fraction
# color in histograms
hist_color = b
# if True, generate corner plot
plot_corner = True

## The plotting parameters below are not needed for a fit of the H2O fraction
# color in histograms for metallicity = 1*solar and 50*solar
met1_color = b
met50_color = g

# if True, plot individual corner plots for each fit
corner_indiv = True
# if True, plot both corner plots superimposed
corner_both = True



##------------------- User inputs ------------------
## --- User inputs: Spectrum and labels --- #
# input required every time

#**#** Information on the fitted spectrum (input data)
which_planet = "TRAPPIST-1 c"
which_star = "TRAPPIST-1"
which_visit = "1"
instrument = "NIRISS SOSS"
# label for plots
label = instrument +" "+which_planet +" visit "+which_visit

# path to spectrum files (replace with the path to your files)
if which_visit == "1":
    path_to_spec = "/home/caroline/GitHub/observations/TRAPPIST_1_c/MR_TRAPPIST_1_c_NIRISS_SOSS_visit1_revResp.spec"
elif which_visit == "2":
    path_to_spec = "/home/caroline/GitHub/observations/TRAPPIST_1_c/MR_TRAPPIST_1_c_NIRISS_SOSS_visit2_revResp.spec"

spec_format = "wavemicrons" # create a new one in pytransspec.py if needed. Current options: ["basic", "wavemicrons"]]

# choose suffix for all the files produced by this fit
res_suffix="TRAPPIST_1_c_example"

## --- User inputs: Stellar parameters --- #
if which_star == "TRAPPIST-1":  ## copy this block of code for another star if needed!
    print("The star is TRAPPIST-1 !")

    # most are from Agol+2020 (Table 7)
    Mstar = 0.0898 * const.M_sun.value  # Mann et al. (2019)
    Rstar = 0.1192 * const.R_sun.value  # Agol+20
    Teffstar = 2566.  # K, Agol+20
    Teffstar_err = 26.  # K, Agol+20
    feh = 0.040  # [Fe/H], Gillon+2017
    loggstar = 5.2396  # cgs, Agol+20

    print('logg =' + str(loggstar))
else:
    print("Stellar parameters are not defined for the star " + which_star + " !!!")
    pdb.set_trace()

## --- User inputs: MCMC fitting params

nsteps=3000
frac_burnin = 0.6
burnin = int(nsteps*frac_burnin)

# which parameters to fit
fitspot = True
fitfac = True
fitThet = True
fitTphot = True
fitDscale = True
fitlogg_phot = True
fitlogg_het = True

# whether to save the fit
save_fit=True

# Setting up Gaussian priors, if any

# --- Block to use if there is no Gaussian prior ---

# gaussparanames = np.array([])
# hyperp_gausspriors = []

# --- Block to use if you want to use a Gaussian prior e.g. on the stellar temperature ---
gaussparanames = np.array(["Tphot"])
hyperp_gausspriors = [[Teffstar,70]] # mean and std of the Gaussian prior on Tphot

if len(gaussparanames):
    print("** Using Gaussian prior on ",list(gaussparanames))

# specify whether we want to fit fspot/ffac with prior uniform in log or lin space
fitLogfSpotFac = [0,0] # this means fitting both in linear space
hyperp_logpriors = [-5,0] #[]


# Where to get the photosphere log g value from: user-specified value or pre-set loggstar
logg_phot_source = "loggstar" # options: "value", "loggstar"
logg_phot_value = 5
# where to get the heterogeneity log g value from: user-specified value, or pre-set loggstar, or whatever logg_phot is
logg_het_default_source = "logg_phot" # options: "value", "logg_phot"
logg_het_value = 5



## --- User inputs: Read in stellar models grid --- #

#** Modify below only if you generated the grid differently

# stellar models grid file path
if which_star == "TRAPPIST-1":
    # range of params for the grid
    logg_range = [2.5,5.5]
    Teff_range = [np.min([2300.-Teffstar, -100.])+Teffstar, Teffstar+1000.]
    loggstep = 0.1 #cgs
    Teffstep = 20. #K
    resPower_target = 10000
    wv_min_um = 0.2
    wv_max_um = 5.4

    # stellar models grid file path
    stmodfile = "../../R"+str(resPower_target)+"_model_grids/TRAPPIST_1"
# Add other "elif" statement for another star

stmodfile = stmodfile + "_pymsg.h5"

## --- End of user inpute --- #


## --- Load the grid --- #
print("Grid parameter ranges:")
print("logg:", logg_range)
print("Teff:", Teff_range)
# sys.exit()
wv_template_thisR, wv_template_edges_thisR = sru.make_wavelength_array(wv_min_um=wv_min_um, wv_max_um=wv_max_um,
                    resPower=resPower_target, use_pymsg=True)


# check if the grid file exists
if os.path.exists(stmodfile):
    print("Stellar model grid file existed! Reading it in...")
    Teffs_grid = np.arange(Teff_range[0], Teff_range[1], Teffstep)
    loggs_grid = np.arange(logg_range[0], logg_range[1], loggstep)

    h5f = h5py.File(stmodfile, 'r')

    models_grid_fixedR = h5f['model_grid'][:]
    h5f.close()
    print("Grid loaded, file closed.")
# if not, generate it
else:
    pdb.set_trace()
    print("The stellar models grid does not exist !! It needs to first be \
          created before running this file with create_fixedR_grid_pymsg.py !!")


print("Fixed resolution model grid shape:", models_grid_fixedR.shape)


## Get default log g for the heterogeneity and photosphere

# logg for MCMC
if logg_phot_source == "loggstar":
    logg_phot = deepcopy(loggstar)
elif logg_phot_source == "value":
    logg_phot = deepcopy(logg_phot_value)

if logg_het_default_source == "logg_phot":
    logg_het_default = deepcopy(logg_phot)
elif logg_het_default_source == "value":
    logg_het_default = deepcopy(logg_het_value)

## Setup for plotting

pad = 0.25 # in um
target_resP = 100 # plot stellar spectra at which resolution