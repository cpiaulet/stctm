[choice of inputs]

# label for the observations being processed
label_obs = test_visit

# whether to start from a time series of spectra, or from a spectrum file
start_from_timeseries = True

# whether to save the median spectrum that was created from the time series
save_median_spectrum = False
# path to save the median spectrum to
path_save_median_spectrum = ../../observations/planetname/planet_outoftransit_spectrum.csv

## Only used if start_from_timeseries==True
# path to stellar spectrum time series (where on your installation to find the data. Example with a Eureka! output format)
path_to_stellar_spec_ts = /home/caroline/GitHub/eureka_results/Results20230822_TRAPPIST_1_d__grp0-5__refpix11_TRAPPIST_1_d_NIRSPEC_PRISM_20221109/Stage3/S3_2024-11-09_std_absfluxcal_run1/ap7_bg8/S3_std_absfluxcal_ap7_bg8_SpecData.h5

## Only used if start_from_timeseries==False
# path to spectrum file
path_to_spec = /home/caroline/GitHub/observations/GJ_3090_b/GJ3090b_spectrum.csv
# format to read in the spectrum. create a new one in pystellspec.py if needed. Current options: ["MR_csv", "basic"]]
spec_format = MR_csv

# stellar models grid file path
stmodfile = ../../R10000_model_grids/TRAPPIST_1_pymsg.h5

[preprocessing]

## Plotting (to help with choice of jd_range_mask)
# whether to stop after initial processing instead of running MCMC
optimize_param = False

# label for the choice of what is masked in the time and wavelength domains
obsmaskpattern= avoidflares

# kernel size for *plotted* median-filtered light curve. Set to None for no smoothing.
kern_size = 19

# JD range masked to construct spectrum. List of lists of intervals to mask as start1_end1|start2_end2...
jd_range_mask = 59892.745_59892.77|59892.795_59892.86

# Mask custom wavelength range (user-defined, e.g. saturation). Same format as jd_range_mask.
wave_range_mask =

[saving options]

# whether to save the fit results to the output directory
save_fit = True

# suffix for all output files
res_suffix = test_for_GitHub

[stellar params]

# effective temperature in K
Teffstar = 2566

# metallicity [Fe/H] in dex
feh = 0.040

# log g in cgs units
loggstar = 5.2396

## Below: for the default values

# Where to get the photosphere log g value from: user-specified value or pre-set loggstar
# options: "value", "loggstar"
logg_phot_source = value
# value to use if 'value' option was chosen
logg_phot_value = 2.5


[stellar models]

# label for the grid (used to label the run)
label_grid = PHOENIX_TRAPPIST_1

# range of params for the grid

# min_max
logg_range = 2.5_5.5
# grid step in cgs
loggstep = 0.1

# options are default or min_max. default assumes the default grid calculation setup, with
# min = np.min([2300.-Teffstar, -100.])+Teffstar and max=Teffstar+1000.
Teff_range = default

# grid step in K
Teffstep = 20.

# resolving power at which the grid was calculated
resPower_target = 10000

# wavelength edges for the grid calculation
wave_range = 0.2_5.4


[MCMC params]

# whether to run the MCMC in parallel
parallel = True

# number of cpu to run the MCMC on
ncpu = 30

# number of MCMC steps [for testing, for analysis use more e.g. 5000]
nsteps=3000
# fraction of the chains to be discarded as burn-in [0-1]
frac_burnin = 0.6

## Which parameters to fit

# whether to fit heterogeneity fractions
fitspot = True
fitfac = True

# whether to fit temperatures of spectral components
fitThet = True
fitTphot = True

# whether to fit log g of spectral components
fitlogg_phot = True
fitlogg_het = True

## Options for handling of the data
# whether to fit a scaling factor to the model flux
fitFscale = True
# whether to fit an error inflation factor
fiterrInfl = True


[priors]

# list of parameters with Gaussian priors. For multiple params sep. with '_': e.g. Tphot_ffac. Otherwise leave empty.
gaussparanames = Tphot
# mean and std of the Gaussian prior. For multiple parameters separate with '|': e.g. mean1_std1|mean2_std2
# leave empty if no gaussparanames.
hyperp_gausspriors = 2566_70

# specify whether we want to fit fspot/ffac with prior uniform in log or lin space
# (e.g. 0_0: both in lin space; 1_0: fspot in log space, ffac in lin space)
fitLogfSpotFac = 0_0
# lower and upper bound of the log(prior) on the heterogeneity fraction(s).
hyperp_logpriors = -5_0

[plotting]

# amount of padding in microns (unit used for spectrum plots)
pad = 0.25

# resolving power to smooth model spectra to (when plotting them)
target_resP = 300



